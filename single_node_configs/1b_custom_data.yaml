# Config for multi-node full finetuning in full_finetune_distributed.py
# using a Llama3.3 70B Instruct model
#
# This config assumes that you've run the following command before launching:
#   tune download meta-llama/Llama-3.3-70B-Instruct --ignore-patterns "original/consolidated*" --output-dir SHARED_CLUSTER_FS
#
# To launch on 2 nodes w/ 8 devices on a SLURM cluster, run the following command:
#   sbatch full_finetune_multinode.slurm
#
# This config is only tested on 2 nodes w/ 8 H100 machines.

output_dir: /tmp/torchtune/llama3_3_70B/full # Metaflow will replace this
base_model_dir : /tmp/llama-model # Metaflow will replace this
dataset_file: /tmp/final_dataset.json # Metaflow will replace this

huggingface:
  repo_id: meta-llama/Llama-3.2-1B-Instruct
  allow_patterns:
    - "*.safetensors"
    - "*.json"
    - "original/tokenizer.*"

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${base_model_dir}/original/tokenizer.model # TODO : gets replaced by 
  max_seq_len: 40960

# TODO: Change this to a value when you are dry running something. 
max_steps_per_epoch: null

# Dataset
dataset:
  _component_: torchtune.datasets.text_completion_dataset
  packed: True  # Packing : https://pytorch.org/torchtune/0.2/generated/torchtune.datasets.PackedDataset.html
  source: text
  data_files: ${dataset_file}
  # column: context

  # download_mode: force_redownload
seed: null
shuffle: True # Don't shuffle if its custom text dataset. 

# Model Arguments
model:
  _component_: torchtune.models.llama3_2.llama3_2_1b

checkpointer:
  # _component_: torchtune.training.FullModelHFCheckpointer
  _component_: metaflow_tune_checkpointer.MetaflowFullModelCheckpointer
  checkpoint_dir: ${base_model_dir} 
  checkpoint_files: [
    model.safetensors
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}/checkpoints
  model_type: LLAMA3_2
  use_async_checkpoint: True
  # checkpoint_files: # todo: metaflow should change this value. 
    # filename_format: model-{}-of-{}.safetensors
    # max_filename: "00030"
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 1
epochs: 20

optimizer:
  _component_: torch.optim.AdamW
  lr: 1e-5
  fused: True

lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 10

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

gradient_accumulation_steps: 1  # Use to increase effective batch size

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory
# custom_sharded_layers: ['tok_embeddings', 'output']  # Layers to shard separately (useful for large vocab size models). Lower Memory, but lower speed.
# fsdp_cpu_offload: False
clip_grad_norm: null

compile: False  # torch.compile the model + loss, True increases speed + decreases memory
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: torchtune
  log_dir: ${output_dir}/logs

log_every_n_steps: 1
log_peak_memory_stats: True

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1