# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Llama3.3 70B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-3.3-70B-Instruct --ignore-patterns "original/consolidated*"
#
# To launch on 8 devices, run the following command from root:
#   tune run --nproc_per_node 8 full_finetune_distributed --config llama3_3/70B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 8 full_finetune_distributed --config llama3_3/70B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config is only tested on an 8xA100 machine.
#

output_dir: /tmp/torchtune/llama3_3_70B/full # Metaflow will replace this
base_model_dir : /tmp/llama-model # Metaflow will replace this

huggingface:
  repo_id: meta-llama/Llama-3.3-70B-Instruct
  allow_patterns:
    - "*.safetensors"
    - "*.json"
    - "original/tokenizer.*"

# Parallelism
tensor_parallel_dim: 8
tensor_parallel_plan:
  _component_: torchtune.models.llama3.base_llama_tp_plan

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${base_model_dir}/original/tokenizer.model
  max_seq_len: 1024

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_dataset
  packed: False  # True increases speed
seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama3_3.llama3_3_70b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_model_dir}
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    max_filename: "00030"
  recipe_checkpoint: null
  output_dir: ${output_dir}/checkpoints
  model_type: LLAMA3
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 8
epochs: 1
max_steps_per_epoch: null

optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-5
  # Note: highly recommended to use fused=True optimizer flag
  # with CPU offload for faster optimizer step.
  fused: false

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

# `gradient_accumulation_steps` is used to increase effective batch size
# with value of 1, we get an average of 55 tokens-per-second-per-gpu
# for 16 GPU cluster that is around 880 tokens-per-second
# with value of 4, we get an average of 55-80 tokens-per-second-per-gpu
# for 16 GPU cluster that is around 1280 tokens-per-second
gradient_accumulation_steps: 1


# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory
custom_sharded_layers: ['tok_embeddings', 'output']  # Layers to shard separately (useful for large vocab size models). Lower Memory, but lower speed.
fsdp_cpu_offload: False
clip_grad_norm: null
compile: True  # torch.compile the model + loss, True increases speed + decreases memory
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: torchtune
  log_dir: ${output_dir}/logs

log_every_n_steps: 1
log_peak_memory_stats: True

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1