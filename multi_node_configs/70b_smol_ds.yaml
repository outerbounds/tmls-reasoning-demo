# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Llama3.3 70B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-3.3-70B-Instruct --ignore-patterns "original/consolidated*"
#
# To launch on 8 devices, run the following command from root:
#   tune run --nproc_per_node 8 full_finetune_distributed --config llama3_3/70B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 8 full_finetune_distributed --config llama3_3/70B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config is only tested on an 8xA100 machine.
#

output_dir: /tmp/torchtune/llama3_3_70B/full # Metaflow will replace this
base_model_dir : /tmp/llama-model # Metaflow will replace this
dataset_dir: /tmp/dataset # Metaflow will replace this


huggingface:
  repo_id: meta-llama/Llama-3.1-70B
  allow_patterns:
    - "*.safetensors"
    - "*.json"
    - "original/tokenizer.*"

hf_dataset:
  repo_id: HuggingFaceTB/smoltalk


# # Parallelism
tensor_parallel_dim: 8
tensor_parallel_plan:
  _component_: torchtune.models.llama3.base_llama_tp_plan

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${base_model_dir}/original/tokenizer.model
  max_seq_len: 8192

# Dataset
dataset:
  # _component_: torchtune.datasets.instruct_dataset
  _component_: smol_ds.instruct_dataset # custom python module
  source: ${dataset_dir}
  split: train
  name: all
  packed: True


seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama3_1.llama3_1_70b

checkpointer:
  _component_: metaflow_tune_checkpointer.MetaflowFullModelCheckpointer
  checkpoint_dir: ${base_model_dir}
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    max_filename: "00030"
  recipe_checkpoint: null
  output_dir: ${output_dir}/checkpoints
  model_type: LLAMA3
  # ------ MetaflowFullModelCheckpointer specific configs ------
  # `use_async_checkpoint` will help saving checkpoint from disk to cloud store in async manner. 
  use_async_checkpoint: True 
  # We want to keep clearing the disk of old checkpoints when we write new ones
  # so we set max_checkpoints_on_disk to 0. This is because if we are writing checkpoints 
  # to memory then we need to keep the footprint in memory very small. 
  # `max_checkpoints_on_disk` configures how many checkpoints will keep being on disk 
  # once persisted to cloud store. 
  max_checkpoints_on_disk: 0 
  # `ephemeral_recipe_checkpoints` configures whether we want to keep the recipe checkpoint
  # on disk once persisted to cloud store. Setting it to True will delete the recipe checkpoint
  # from disk once persisted to cloud store before saving a new recipe checkpoint.
  ephemeral_recipe_checkpoints: True
  # `delete_original_checkpoints_on_load` configures whether we want to delete the original checkpoints
  # on load. This is useful when we want to resume from a checkpoint but need the original checkpoints
  # present on disk. This is useful when the original checkpoints are in memory and we want to save space
  # at the beginning of the training run.
  delete_original_checkpoints_on_load: True
  # `sync_recipe_checkpoints` configures whether we want to save the recipe checkpoint
  # as a Metaflow checkpoint. Recipe checkpoints can be really large (double the size of the model checkpoint)
  # and we only need them for resuming a failed run. The can be very essential but just persisting them around
  # can result in a lot of bucket space being used up. if you regular checkpoint is 100GB, the recipe checkpoint
  # will be over 200GB which means that per-epoch metaflow ends up checkpointing 300GB of data. This is a lot. 
  # For context a regular 10 epoch training run can result in 3 TB of models!
  sync_recipe_checkpoints: false
  # ------ / MetaflowFullModelCheckpointer specific configs ------

resume_from_checkpoint: False
checkpoint_epoch_frequency: 1

# Fine-tuning arguments
batch_size: 2
epochs: 5 # With batch size of 2, tensorparallel size of 8, gradient accumulation of 4, and `all` in the smoltalk dataset, we get 3680 steps per epoch
max_steps_per_epoch: null

optimizer:
  _component_: torch.optim.AdamW
  # 1e-4 is too high for this dataset and this model type
  # 2e-6 is a good starting point
  lr: 7e-6
  # Note: highly recommended to use fused=True optimizer flag
  # with CPU offload for faster optimizer step.
  fused: false

lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 600


loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

# `gradient_accumulation_steps` is used to increase effective batch size
# with value of 1, we get an average of 55 tokens-per-second-per-gpu
# for 16 GPU cluster that is around 880 tokens-per-second
# with value of 4, we get an average of 55-80 tokens-per-second-per-gpu
# for 16 GPU cluster that is around 1280 tokens-per-second
# Why we set gradient_accumulation_steps to 1:
# https://discuss.huggingface.co/t/batch-size-vs-gradient-accumulation/5260/6
gradient_accumulation_steps: 1
# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory
custom_sharded_layers: ['tok_embeddings', 'output']  # Layers to shard separately (useful for large vocab size models). Lower Memory, but lower speed.
fsdp_cpu_offload: False
clip_grad_norm: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: nebius_training
  log_dir: ${output_dir}/logs

log_every_n_steps: 1
log_peak_memory_stats: True

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False